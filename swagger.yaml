swagger: '2.0'
info:
  title: JTHub Workflow Registration Service API
  version: "0.1"
consumes:
  - application/json
produces:
  - application/json
security:
  # enable OAuth protection for all REST endpoints
  # (only active if the TOKENINFO_URL environment variable is set)
  - oauth2: [uid]
paths:
  /workflows/_id/{workflow_id}:
    get:
      tags: [Workflows]
      operationId: app.get_workflow_by_id
      summary: Get workflow by workflow ID
      parameters:
        - $ref: '#/parameters/workflow_id'
      responses:
        200:
          description: Return workflow
          schema:
            type: array
  /workflows/_id/{workflow_id}/_ver/{workflow_version}:
    get:
      tags: [Workflows]
      operationId: app.get_workflow_by_id_and_version
      summary: Get workflow by workflow ID and version
      parameters:
        - $ref: '#/parameters/workflow_id'
        - $ref: '#/parameters/workflow_version'
      responses:
        200:
          description: Return workflow
          schema:
            type: array
  /workflows/{owner_name}:
    get:
      tags: [Workflows]
      operationId: app.get_workflows
      summary: Get all workflows for an owner
      parameters:
        - $ref: '#/parameters/owner_name'
      responses:
        200:
          description: Return workflows
          schema:
            type: array
    post:
      tags: [Workflows]
      operationId: app.register_workflow
      summary: Register a new workflow under an owner
      parameters:
        - $ref: '#/parameters/owner_name'
        - name: workflow
          in: body
          schema:
            $ref: '#/definitions/Workflow'
      responses:
        200:
          description: Workflow created
          schema:
            $ref: '#/definitions/Workflow'
        409:
          description: Workflow registration failed
  /workflows/{owner_name}/{workflow_name}:
    get:
      tags: [Workflows]
      operationId: app.get_workflow
      summary: Get detail for a workflow (including all versions)
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/workflow_name'
      responses:
        200:
          description: Return workflow
    post:
      tags: [Workflows]
      operationId: app.register_workflow_version
      summary: Register a new version of a workflow
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/workflow_name'
      responses:
        200:
          description: Return workflow
  /workflows/{owner_name}/{workflow_name}/{workflow_version}:
    get:
      tags: [Workflows]
      operationId: app.get_workflow_ver
      summary: Get detail for a workflow with specific version
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/workflow_name'
        - $ref: '#/parameters/workflow_version'
      responses:
        200:
          description: Return workflow
        404:
          description: Owner does not exist
  /workflows/{owner_name}/{workflow_name}/{workflow_version}/_release:
    put:
      tags: [Workflows]
      operationId: app.release_workflow
      summary: Release a workflow, no change is permitted once released
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/workflow_name'
        - $ref: '#/parameters/workflow_version'
      responses:
        200:
          description: Return workflows
  /workflows/{owner_name}/{workflow_name}/{workflow_version}/_workflowfile:
    get:
      tags: [Workflows]
      operationId: app.download_workflowfile
      summary: Download workflowfile for a particular version of a workflow
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/workflow_name'
        - $ref: '#/parameters/workflow_version'
      responses:
        200:
          description: Workflow file downloaded
  /workflows/{owner_name}/{workflow_name}/{workflow_version}/_workflow_package:
    get:
      tags: [Workflows]
      operationId: app.download_workflow_package
      summary: Download workflow package for a particular version of a workflow
      produces:
        - "application/octet-stream"
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/workflow_name'
        - $ref: '#/parameters/workflow_version'
      responses:
        200:
          description: Workflow package downloaded
          schema:
            type: file
  /workflows/{owner_name}/{workflow_name}/{workflow_version}/_validate_jobjson:
    put:
      tags: [JobJSON]
      operationId: app.validate_jobjson
      summary: Validate the supplied JobJSON against a particular version of a workflow
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/workflow_name'
        - $ref: '#/parameters/workflow_version'
        - name: jobjson
          in: body
          schema:
            $ref: '#/definitions/JobJSON'
      responses:
        200:
          description: JobJSON valid
        400:
          description: JobJSON invalid
  /workflows/{owner_name}/{workflow_name}/{workflow_version}/_get_execution_plan:
    put:
      tags: [JobJSON]
      operationId: app.get_execution_plan
      summary: Generate a job execution plan for the supplied JobJSON against a particular version of a workflow
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/workflow_name'
        - $ref: '#/parameters/workflow_version'
        - name: jobjson
          in: body
          schema:
            $ref: '#/definitions/JobJSON'
      responses:
        200:
          description: Job execution plan generated
        400:
          description: JobJSON invalid


parameters:
  owner_name:
    name: owner_name
    description: Owner's unique name
    in: path
    type: string
    required: true
    pattern: "^[a-zA-Z]{1}[a-zA-Z0-9-_]{2,31}$"
  workflow_id:
    name: workflow_id
    description: Workflow's unique ID
    in: path
    type: string
    required: true
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
  workflow_name:
    name: workflow_name
    description: Workflow's name
    in: path
    type: string
    required: true
    pattern: "^[a-zA-Z]{1}[a-zA-Z0-9-_]{2,31}$"
  workflow_version:
    name: workflow_version
    description: Workflow's version
    in: path
    type: string
    required: true
    pattern: "^[a-zA-Z0-9]{1}[a-zA-Z0-9-_.]{1,15}$"


definitions:
  Workflow:
    type: object
    required:
      - name
    properties:
      id:
        type: string
        description: Workflow's unique identifier
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        example: "7ebf7fa9-f70f-481a-a499-5fba3f8c5078"
        readOnly: true
      name:
        type: string
        description: Workflow's name
        pattern: "^[a-zA-Z]{1}[a-zA-Z0-9-_]{2,31}$"
        example: "BWA-MEM"
        minLength: 3
        maxLength: 30
      workflow_type:
        type: string
        description: In which language workflow is written
        enum: ["JTracker"]
        example: "JTracker"
        readOnly: true
      tags:
        type: object
        description: Custom tags
      created:
        type: string
        format: date-time
        description: Creation time
        example: "2015-07-07T15:49:51.230+02:00"
        readOnly: true
  JobJSON:
    type: object
    properties:
      id:
        type: string
        description: Workflow's unique identifier
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        example: "7ebf7fa9-f70f-481a-a499-5fba3f8c5078"
        readOnly: true
      name:
        type: string
        description: Workflow's name
        pattern: "^[a-zA-Z0-9]{1}[a-zA-Z0-9-_.]{2,63}$"
        example: "BWA-MEM"
        minLength: 3
        maxLength: 64


securityDefinitions:
  oauth2:
    type: oauth2
    flow: implicit
    authorizationUrl: https://example.com/oauth2/dialog
    scopes:
      uid: Unique identifier of the user accessing the service.
